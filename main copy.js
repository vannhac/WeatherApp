// select element
const form = document.querySelector("#weather__form");
const weatherInput = document.querySelector("#weather__input");
const notification = document.querySelector(".errorDisplay");
const weatherDisplay = document.querySelector(".weatherDisplay");
// VAR
const apiKey = "60baa7d1b947445441469180877c9dce";
// Event
/*
in: input value, keyvalue (b·∫Øt s·ª± ki·ªán) 
out: th√¥ng tin chi ti·∫øt v·ªÅ th√†nh ph·ªë m√¨nh mu·ªën
ans 
ki·ªÉm tra value n√≥ c√≥ r·ªóng ko, n·∫øu c√≥ th√¨ d√πng h√†m l·ªói
r·ªìi ti·∫øp t·ª•c t·∫°o url key ƒë·ªÉ m√¨nh l·∫•y th√¥ng tin
try .. catch ƒë·ªÉ khi h√†m try ra l·ªói th√¨ s·∫Ω hi·ªán ·ªü catch ha
n·∫øu ƒë√∫ng th√¨ m√¨nh c·∫ßn 1 h√†m l·∫•y th√¥ng tin th·ªùi ti·∫øt
h√†m th·ª© 2 l√† t·ª´ th√¥ng tin ƒë√≥ in th·ªùi gian
 */
form.addEventListener("submit", async (e) => {
  e.preventDefault();
  const city = weatherInput.value.trim();
  if (city) {
    try {
      let weatherResponse = await getWeatherData(city);
      showWeather(weatherResponse);
      weatherInput.value = "";
      weatherInput.focus();
    } catch (error) {
      showNotification(error);
    }
  } else {
    showNotification("Form's empty");
  }
});
async function getWeatherData(city) {
  // b·∫Øt ƒë∆∞·ª£c response
  const response = await fetch(
    `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`
  );
  // ki·ªÉm tra n√≥ oke ko
  if (!response.ok) {
    throw new Error("Cannot Fetch the city");
  } else {
    return await response.json();
  }

  // tr·∫£ v·ªÅ k·∫øt qu·∫£ b·∫±ng json
}
function showWeather(data) {
  const {
    name: city,
    main: { temp, humidity },
    weather: [{ description, id }],
  } = data;
  const emoji = getEmoji(id);

  weatherDisplay.innerHTML = `<h1 class="cityDisplay">${city}</h1>
      <p class="temptDisplay">${Math.floor(temp - 273.15)}¬∞C</p>
      <p class="humidityDisplay">Humidity: ${humidity}%</p>
      <p class="descDisplay">${description}</p>
      <p class="emojiDisplay">${emoji}</p>`;
  weatherDisplay.style.display = "flex";
}

// EMOJI
function getEmoji(id) {
  switch (true) {
    case id >= 200 && id < 300:
      return "‚õàÔ∏è";
    case id >= 300 && id < 500:
      return "üåßÔ∏è";
    case id >= 500 && id < 600:
      return "üåßÔ∏è";
    case id >= 600 && id < 700:
      return "‚ùÑÔ∏è";
    case id >= 700 && id < 800:
      return "üçÉ";
    case id >= 800:
      return "üåû";
  }
}

// Error
function showNotification(msg) {
  notification.innerHTML = msg;
  notification.classList.add("error-trans");
  setTimeout(() => {
    notification.classList.remove("error-trans");
  }, 2000);
}
